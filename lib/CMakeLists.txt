CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
SET(PROJECT_NAME mh_lib)
PROJECT(${PROJECT_NAME})

SET(CMAKE_CXX_FLAGS         "${CMAKE_CXX_FLAGS}         -std=c++1y -Wall")
SET(CMAKE_CXX_FLAGS_DEBUG   "${CMAKE_CXX_FLAGS_DEBUG}   -Wall -g -pg -DDEBUG")
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O2 -g")

IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE "Release")
ENDIF()

SET(CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")

SET(CMAKE_EXPORT_COMPILE_COMMANDS 1)

INCLUDE_DIRECTORIES(include)

### LIBRARIES ###

### PKGCONFIG
FIND_PACKAGE(PkgConfig REQUIRED)

### EIGEN
INCLUDE_DIRECTORIES($ENV{EIGEN3_INCLUDE_DIR})
ADD_DEFINITIONS(-DEIGEN_DONT_ALIGN)

### OPENGL
FIND_PACKAGE(OpenGL REQUIRED)
LINK_LIBRARIES(${OPENGL_gl_LIBRARY})

### GLEW
FIND_PACKAGE(GLEW REQUIRED)
INCLUDE_DIRECTORIES(${GLEW_INCLUDE_DIRS})
LINK_LIBRARIES(${GLEW_LIBRARIES})

### GLFW
PKG_SEARCH_MODULE(GLFW REQUIRED glfw3)
INCLUDE_DIRECTORIES(${GLFW_INCLUDE_DIRS})

### ASSIMP
PKG_SEARCH_MODULE(ASSIMP REQUIRED assimp)
INCLUDE_DIRECTORIES(${ASSIMP_INCLUDE_DIRS})

### TINYOBJLOADER
SET(EXTRA_SRC_FILES ${EXTRA_SRC_FILES} ${PROJECT_SOURCE_DIR}/src/ext/tinyobjloader/tiny_obj_loader.cc)

### IMGUI
FILE(GLOB IMGUI_SRC_FILES ${PROJECT_SOURCE_DIR}/src/ext/imgui/*.cpp)
SET_SOURCE_FILES_PROPERTIES(${IMGUI_SRC_FILES} PROPERTIES COMPILE_FLAGS "-Wno-maybe-uninitialized -Wno-unused") # Imgui throws some strange warnings
SET(EXTRA_SRC_FILES ${EXTRA_SRC_FILES} ${PROJECT_SOURCE_DIR}/src/ext/gl3w/gl3w.c)

### NFD
SET(NFD_SRC_DIR ${PROJECT_SOURCE_DIR}/src/ext/nfd)
SET(NFD_SRC_FILES ${NFD_SRC_DIR}/nfd_common.c
                  ${NFD_SRC_DIR}/nfd_gtk.c)
SET(EXTRA_SRC_FILES ${EXTRA_SRC_FILES} ${NFD_SRC_FILES})

### SOIL
FILE(GLOB SOIL_SRC_FILES ${PROJECT_SOURCE_DIR}/src/ext/soil/*.c)
SET_SOURCE_FILES_PROPERTIES(${SOIL_SRC_FILES} PROPERTIES COMPILE_FLAGS "-Wno-unused-result") # SOIL throws some unnecessary warnings
SET(EXTRA_SRC_FILES ${EXTRA_SRC_FILES} ${SOIL_SRC_FILES})

### GTK
PKG_SEARCH_MODULE(GTK REQUIRED gtk+-3.0)
INCLUDE_DIRECTORIES(${GTK_INCLUDE_DIRS})

SET(LIB_LIBRARIES ${GLFW_STATIC_LIBRARIES}
                  ${ASSIMP_STATIC_LIBRARIES}
                  ${GTK_LIBRARIES}
)

### TARGET ###

### SRC FILES
FILE(GLOB_RECURSE LIB_SRC_FILES ${PROJECT_SOURCE_DIR}/src/*.cpp)

### MAIN LIBRARY
ADD_LIBRARY(mh SHARED ${LIB_SRC_FILES} ${EXTRA_SRC_FILES})
TARGET_LINK_LIBRARIES(mh
    ${LIB_LIBRARIES}
)

### INSTALL ###

SET(MH_MAJOR_VERSION 0)
SET(MH_MINOR_VERSION 1)
SET(MH_PATCH_VERSION 0)
SET(MH_VERSION
    ${MH_MAJOR_VERSION}.${MH_MINOR_VERSION}.${MH_PATCH_VERSION})

SET(INSTALL_LIB_DIR     lib          CACHE PATH "Installation directory for libraries")
SET(INSTALL_INCLUDE_DIR include      CACHE PATH "Installation directory for header files")
SET(INSTALL_CMAKE_DIR   lib/cmake/MH CACHE PATH "Installation directory for CMake files")

FOREACH(p LIB INCLUDE CMAKE)
    SET(var INSTALL_${p}_DIR)
    IF(NOT IS_ABSOLUTE "${${var}}")
        SET(${var} "${CMAKE_INSTALL_PREFIX}/${${var}}")
    ENDIF()
ENDFOREACH()

EXPORT(TARGETS mh FILE "${PROJECT_BINARY_DIR}/MHTargets.cmake")
EXPORT(PACKAGE MH)

FILE(RELATIVE_PATH REL_INCLUDE_DIR "${INSTALL_CMAKE_DIR}"
    "${INSTALL_INCLUDE_DIR}")
FILE(RELATIVE_PATH REL_LIB_DIR "${INSTALL_CMAKE_DIR}"
    "${INSTALL_LIB_DIR}")

# include and lib dirs for build tree
SET(CONF_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/include")
SET(CONF_LIB_DIRS "${PROJECT_BINARY_DIR}")
CONFIGURE_FILE(MHConfig.cmake.in
    "${PROJECT_BINARY_DIR}/MHConfig.cmake" @ONLY)

# include and lib dirs for install tree
SET(CONF_INCLUDE_DIRS "\${MH_CMAKE_DIR}/${REL_INCLUDE_DIR}")
SET(CONF_LIB_DIRS "\${MH_CMAKE_DIR}/${REL_LIB_DIR}")
CONFIGURE_FILE(MHConfig.cmake.in
    "${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/MHConfig.cmake" @ONLY)


CONFIGURE_FILE(MHConfigVersion.cmake.in
    "${PROJECT_BINARY_DIR}/MHConfigVersion.cmake" @ONLY)

INSTALL(FILES
    "${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/MHConfig.cmake"
    "${PROJECT_BINARY_DIR}/MHConfigVersion.cmake"
    DESTINATION "${INSTALL_CMAKE_DIR}" COMPONENT dev)

INSTALL(TARGETS mh
    EXPORT MHTargets
    LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT shlib
)

INSTALL(DIRECTORY "${PROJECT_SOURCE_DIR}/include/mh"
        DESTINATION "${INSTALL_INCLUDE_DIR}"
        PATTERN "*.h"
        PATTERN "*.hpp")

INSTALL(EXPORT MHTargets DESTINATION
    "${INSTALL_CMAKE_DIR}" COMPONENT dev)
